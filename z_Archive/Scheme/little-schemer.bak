#|
little-schemer.scm
James Watson, 2013 August
Working through the exercises in "The Little Schemer" by Friedman and Felleisen
|#

; -- Prerequisite Function --
(define atom?
  (lambda (x)
    (and (not (pair? x)) (not (null? x)))))

(define displayln
  (lambda (exp) (display exp) (newline)))
; -- End Prereq --


; == Chapter 1 : Toys ==
(displayln "Chapter 1")

(displayln ; Is it true that this is an atom?
 (atom? 'atom) ; Yes, atom is a tring of characters beginning with the letter a
) 

(displayln ; Is it true that this is an atom?
 (atom? 'turkey) ; Yes
 )

(displayln ; Is it true that this is an atom?
 (atom? 1492) ; Yes, 1492 is a number
 )

(displayln ; Is it true that this is an atom?
 (atom? 'u) ; Yes, u is a string of one character
 )

(displayln ; Is it true that this is an atom?
 (atom? '*abc$) ; Yes
 )

(displayln ; Is it true that this is a list?
 (list? '(atom)) ; Yes, it is an atom enclosed in parentheses
 )

(displayln ; Is it true that this is a list?
 (list? '(atom turkey or)) ; Yes, it is a collection of atoms enclosed in parentheses
 )

(displayln ; What is the 'car' of ...
 (car '(((hotdogs)) (and) (pickle) relish)) ; ((hotdogs))
 ) ; The list of the list of hotdogs is the first member of the list

(displayln ; What is the (car (car exp))?
 (car (car '(((hotdogs)) (and)) )) ; (hotdogs)
 )

(displayln ; What is the cdr of ...
 (cdr '(a b c)) ; (b c)
 )

(displayln ; What is the cdr of ...
 (cdr '((a b c) x y z) ) ; (x y z)
 )

(displayln ; What is the cdr of ...
 (cdr '((x) t r) ) ; (t r)
 )

(displayln ; What is the cdr of ...
 ; (cdr 'hotdogs) ; ERROR
 "You cannot ask for the cdr of an atom"
 )

(displayln ; What is the cdr of ... 
 ;(cdr () ) ; ERROR
 "You cannot ask for the cdr of a null list"
 )

#| ** The Law of cdr ** 
The function cdr is defined only for non-empty lists.  The cdr of any 
non-empty list is always another list. |#

(displayln ; What is the (car (cdr exp))
 (car (cdr '((b) (x y) ((c))) )) ; (x y)
 )

(displayln ; What is the (cdr (cdr exp))
 (cdr (cdr '((b) (x y) ((c))) )) ; (((c)))
 )

(displayln ; What is the (cdr (car exp))
 ;(cdr (car '(a (b (c)) d) )) ; ERROR
 "(cdr (car '(a (b (c)) d) )), Error, (car ...) returns atom 'a"
 )

(displayln ; What is the cons of
 (cons 'peanut '(butter and jelly) ) ; List: (peanut butter and jelly)
 ) ; Atom 'peanut has been consed onto list '(butter and jelly)

(displayln ; What is the cons of 
 (cons '(banana and) '(peanut butter and jelly) ) 
 ) ; ((banana and) peanut butter and jelly)

(displayln ; What is the cons of
 (cons '((help) this) '(is very ((hard) to learn)) )
 ) ; (((help) this) is very ((hard) to learn))

(displayln ; What is the cons of
 (cons '(a b (c)) '() ) ; ((a b (c)))
 )

(displayln ; What is the cons of
 (cons 'a '() ) ; (a)
 )
 
(displayln ; What is the cons of
 (cons '((a b c)) 'b ) ; (((a b c)) . b)
 )

(displayln ; What is the cons of 
 (cons 'a 'b) ; (a . b)
 )

#| ** The Law of cons ** 
The function cons takes two arguments. The second argument must be a list.
(This is not a requirement of Scheme or most Lisps, see above.) The result 
is a list. (In Lisps the result is a cons cell, which may or may not qualify 
as a list depending on what arguments are given.) |#

(displayln ; What is (cons op1 (car op2))
 (cons 'a (car '((b) c d) ) ) ; (a b), result of (car 'a '(b))
 )

(displayln ; What is (cons op1 (cdr op2))
 (cons 'a (cdr '((b) c d) ) ) ; (a c d), result of (car 'a '(c d))
 )

(displayln ; Is it true that '() is the null list?
 (null? '()) ; Yes, () is a list of zero S-expressions
 )

(displayln ; What is the result of ...
 (null? (quote ())) ; True, '() is syntactic sugar for (quote ())
 )

(displayln ; Is it true that exp is null?
 (null? '(a b c) ) ; False, (a b c) is a non-empty list
 )

(displayln ; What is null? of an atom?
 (null? 'a) ; False, null? is false for everything except the empty list
 )

#| ** The Law of null? ** 
The function null? is defined only for lists. (In practice, null? is defined
for all datatypes.) |#

(displayln ; Is it true or false that 'Harry is an atom?
 (atom? 'Harry) ; True
 )

(displayln ; Is (atom? exp) true or false?
 (atom? '(Harry had a heap of apples) ) ; False, exp is a list
 ) ; atom? takes one argument, any S-expression

(displayln ; Is (atom? (car exp) ) true or false?
 (atom? (car '(Harry had a heap of apples)) ) ; True, 'Harry is an atom
 )

(displayln ; Is (atom? (cdr exp) ) true or false?
 (atom? (cdr '(Harry had a heap of apples)) ) ; False
 ) ; '(had a heap of apples) is not an atom

(displayln ; True or false?
 (atom? (cdr '(Harry)) ) ; False, '() is not an atom
 )

(displayln ; True or false?
 (atom? (car (cdr '(swing low sweet cherry oat) ))) ; True, 'low is an atom
 )

(displayln ; True or false?
 (atom? (car (cdr '(swing (low sweet) cherry oat) ))) ; False
 ) ; '(low sweet) is not an atom

(displayln ; Are these two atoms equal?
 (eq? 'Harry 'Harry) ; Yes
 )

(displayln ; Are these two atoms equal?
 (eq? 'margarine 'butter) ; No
 )

(displayln ; True or false?
 (eq? '() '(strawberry) ) ; False
 )

(displayln ; Tue or false?
 (eq? 6 7) ; False
 )

#| ** The Law of eq? **  
The function eq? takes two arguments. Each must be a non-numeric atom.
(In practice arguments may be any atom including numbers, as well as lists.)
|#

(displayln ; True or false?
 (eq? (car '(Mary had a little lamb chop)) 'Mary ) ; True
 ) ; 'Mary / 'Mary same atom

(displayln ; True or false?
 (eq? (cdr '(soured milk)) 'milk) ; False
 )

(let ((l '(beans beans we need jelly beans)))
  (displayln ; True or false
   (eq? (car l) (car (cdr l)) ) ; True
   ))

; == Chapter 1 : Do It, Do It Again, and Again, and Again ==

(define lat?
  (lambda (l)
    (cond ((null? l) #t) ; Return true if the argument is empty list '()
          ; Meaning either the previous items were atoms, or argument was '()
          ((atom? (car l)) (lat? (cdr l))) ; If item is atom, inspect next
          ; This is a recursive call on each successive sub-list until list
          ;terminator '() is reached
          (else #f)))) ; First non-atom encountered, return false
          ; else, as a condition, is always true, it is the default case

; A lat is a [L]ist of [AT]oms

(displayln ; True or false?
 (lat? '(Jack sprat could eat no chicken fat) ) ; True
 ) ; Each expression in the list is an atom

(displayln ; True or false?
 (lat? '((Jack) Sprat could eat no chicken fat) ) ; False
 ) ; (car exp) is a list '(Jack), not an atom

(displayln ; True or false?
 (lat? '(Jack (Sprat could) eat no chicken fat) ) ; False, not all atoms
 )

(displayln ; True or false?
 (lat? '() ) ; True, because it does not contain a list
 ) ; See definition of lat?

(displayln ; True or false
 (or (null? '(a b c)) (null? '()) ) ; True, second expression in or true
 )

(displayln ; True or false
 (or (null? '(a b c)) (null? '(atom)) ) ; False, neither or exp is true
 )